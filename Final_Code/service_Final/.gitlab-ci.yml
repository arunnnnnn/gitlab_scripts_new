#CI Stages to create service in ECS cluster
variables:
  UserInput: "service.csv"
  SERVTMPLTE: "service-template.json"

stages:
    - Purpose
    - SR_CF_template
    - CloudFormation_SR

Stack condition:
  stage: Purpose
  before_script:
    - TODO=$(grep Status $UserInput | cut -d\, -f2)
  script:
    - echo "TODOIT=${TODO}" >> build.env
    - cat build.env
    - echo $TODOIT
  artifacts:
    expire_in: 1 days
#Export VarVal to other stages
    reports:
      dotenv: build.env

#Stage2
Create_JSON:
  stage: SR_CF_template
  before_script:
    - echo "Repo contents"
    - ls
#Collecting input
  script:
    - SERNAME=$(grep serviceName $UserInput | cut -d\, -f2)
    - CLUST=$(grep Cluster $UserInput | cut -d\, -f2)
    - DECO=$(grep Desired_Count $UserInput | cut -d\, -f2)
    - INTYPE=$(grep Launch_Type $UserInput | cut -d\, -f2)
    - TD=$(grep TaskDefinition $UserInput | cut -d\, -f2)
    - var5=$(grep MaximumPercent $UserInput | cut -d\, -f2)
    - var6=$(grep MinimumPercent $UserInput | cut -d\, -f2)
    - var7=$(grep Scheduling_Strategy $UserInput | cut -d\, -f2)
    - echo $var, $var1, $var2, $var3, $var4, $var5, $var6, $var7
#Export VarVal to other stages
    - echo "STACKNAME=${SERNAME}" >> build.env
    - echo "CLUSTNAME=${CLUST}" >> build.env
    - echo "TDNAME=${TD}" >> build.env
    - echo "TODOIT=${TODOIT}" >> build.env
    - cat build.env
#Replacing the template with user provided values
    - sed -i "s|My_service|$SERNAME|g" $SERVTMPLTE
    - sed -i "s|Cluste_name|$CLUST|g" $SERVTMPLTE
    - sed -i "s|Count_Desired|$DECO|g" $SERVTMPLTE
    - sed -i "s|Type_Launch|$INTYPE|g" $SERVTMPLTE
    - sed -i "s|taskdef_name|$TD|g" $SERVTMPLTE
    - sed -i "s|max_Percent|$var5|g" $SERVTMPLTE
    - sed -i "s|min_Percent|$var6|g" $SERVTMPLTE
    - sed -i "s|Startergy|$var7|g" $SERVTMPLTE
#Verifying output and artifact storage
    - cp $SERVTMPLTE output/${SERNAME}-$SERVTMPLTE
    - cat output/${SERNAME}-$SERVTMPLTE
  after_script:
    - ls output/
#Export json to other stages
  artifacts:
    expire_in: 1 days
    paths:
    - output/*
#Export VarVal to other stages
    reports:
      dotenv: build.env
#Perform on
  only:
    - main 
    - dev
    - sit
  
Deploy_CloudFormation_SR:
  stage: CloudFormation_SR
#Dependencies for Deploying on AWS
  needs: [Create_JSON]
  dependencies:
    - Create_JSON
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_SANDBOX
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEYSANDBOX
    - aws configure set region 	$AWS_REGION_SANDBOX
    - echo $STACKNAME
    - echo $CLUSTNAME
    - echo $TDNAME
    - |
       cluster_status=$(aws ecs describe-clusters --clusters $CLUSTNAME --query 'clusters[0].status'| cut -d\" -f2)
       echo $cluster_status
       if [ "$cluster_status" = "ACTIVE" ]; then
       echo "cluster $CLUSTNAME"
       else
       exit 1
       fi
    - |
       status=$(aws ecs describe-task-definition --task-definition $TDNAME | grep status | cut -d ":" -f2 | cut -d\" -f2)
       echo $status
       if [ "$status" == "ACTIVE" ]; then
       echo "Task definition $TDNAME is available"
       else
       exit 1
       fi  
  script:

    - |
      export actioni=$(echo ${TODOIT,,})
      export conditioni=$(echo ${TODOIT^^})
      echo $actioni $conditioni

    - aws cloudformation create-stack --stack-name $STACKNAME-ecs-service --template-body file://output/$STACKNAME-$SERVTMPLTE

    #Verify stack status

    - stack_status=$(aws cloudformation describe-stacks --stack-name $STACKNAME-ecs-service --query 'Stacks[0].StackStatus' | cut -d\" -f2)

    - echo $stack_status
    - |
       while [ "$stack_status" != "${conditioni}_COMPLETE" ]; do
        echo "Stack is in $stack_status state. Waiting for stack to be created."
        sleep 1
        
        aws cloudformation describe-stacks --stack-name $STACKNAME-ecs-service --query 'Stacks[0].[StackStatus,StackStatusReason, CreationTime]' > stack.log
        stack_status=$(cat stack.log | head -2 | tail -1 | cut -d\" -f2)
        echo $stack_status
        cat stack.log

          if [ "$stack_status" = "ROLLBACK_COMPLETE" ]; then
          exit 1
          else
          echo ----------
          fi

       done
       echo "$stack_status"


  when: manual
  only:
    - main 
    - dev 
    - sit 
